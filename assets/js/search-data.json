{
  
    
        "post0": {
            "title": "테스트 Markdown",
            "content": "안녕하세요 . 감사해요 . 잘있어요 . 다시만나요 . Basic setup .",
            "url": "https://dgr1026.github.io/blog/%EC%9D%B4%ED%98%84%EA%B5%AC/nlp/2020/02/25/%ED%85%8C%EC%8A%A4%ED%8A%B8_markdown%EC%9E%85%EB%8B%88%EB%8B%A4.html",
            "relUrl": "/%EC%9D%B4%ED%98%84%EA%B5%AC/nlp/2020/02/25/%ED%85%8C%EC%8A%A4%ED%8A%B8_markdown%EC%9E%85%EB%8B%88%EB%8B%A4.html",
            "date": " • Feb 25, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages&#182; . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages&#182; . In this post, we will cover special features that fastpages provides has for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter&#182; . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc: true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding&#182; . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions . Interactive Charts With Altair&#182; . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables&#182; . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Images w/Captions&#182; . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards&#182; . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos&#182; . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts&#182; . Typing &gt; Warning: There will be no second warning! will render this: Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: Note: A doc link to an example website: fast.ai should also work fine. . More Examples&#182; . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts&#182; . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps&#182; . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://dgr1026.github.io/blog/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About&#182; . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter&#182; . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts&#182; . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair&#182; . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown&#182; . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips&#182; . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips&#182; . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables&#182; . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images&#182; . Local Images&#182; . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images&#182; . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs&#182; . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions&#182; . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements&#182; . Tweetcards&#182; . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos&#182; . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts&#182; . Typing &gt; Warning: There will be no second warning! will render this: Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: Note: A doc link to an example website: fast.ai should also work fine. . Footnotes&#182; . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://dgr1026.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Example Markdown Post",
            "content": "Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . You can include alert boxes …and… . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dgr1026.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "어떻게 해야 기계에게 글을 잘 읽고 말할 수 있게 할까?",
            "content": ". 발표일: 2018.7. | SQuAD가 공개되고 널리 알려지면서 기계독해(Machine Reading Comprehension)가 각광받기 시작했습니다. SQuAD란 스탠포드대에서 만든, 기계가 주어진 문서를 읽고 그와 관련된 질문을 할 경우 정답을 찾아 답해주는 시스템을 위한 데이터셋을 뜻합니다. 이러한 기계독해가 어떻게 작동하는지, 어떻게 접근해야 이해를 돕게 할 수 있고 어떻게 해야 대답을 잘 할 수 있게 하는지에 대한 경험에 대해 이야기해 보고자 합니다. | 발표 슬라이드: [link] | .",
            "url": "https://dgr1026.github.io/blog/mrc/2018/08/08/NAVER_Techtalk.html",
            "relUrl": "/mrc/2018/08/08/NAVER_Techtalk.html",
            "date": " • Aug 8, 2018"
        }
        
    
  

  
  
      ,"page0": {
          "title": "",
          "content": "404 . Page not found :( . The requested page could not be found. .",
          "url": "https://dgr1026.github.io/blog/404.html",
          "relUrl": "/404.html",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dgr1026.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": ". Personal Identification . Name : Hyeon-gu Lee (이현구) | NLP Lab. Dept. of Computer and Communications Engineering, Kangwon National University | Address : 1 Gangwondaehak-gil Chuncheon-si, Gangwon-do, Korea | E-mail : nlphglee@kangwon.ac.kr, dgr1026@naver.com | Supervisor : Harksoo Kim (~ 2020.02 : Kangwon National University, 2020.03 ~ current : Konkuk University; Full Professor ) | . Educational Background . Kangwon National University, Chuncheon, Korea. Ph.D course. Computer and Communications Engineering began in March 2016. | Kangwon National University, Chuncheon, Korea. M.S. in Computer and Communications Engineering awarded in February 2016. Master’s thesis: One-Class Classification Model Based on Lexical Information and Syntactic Patterns. | Kangwon National University, Chuncheon, Korea. B.A. in Computer and Communications Engineering awarded in February 2016. | . Research Intersts . Natural Language Processing, Question Answering, Dialogue System | . Publication . International Journal Papers . Maengsik Choi, Hyeon-gu Lee, and Harksoo Kim (corresponding author), Relation extraction based on two-step classification with distant supervision, Journal of Supercomputing, Vol.72(7) pp. 2609-2622, 2016.07. (DOI 10.1007/s11227-015-1535-4) (SCI) . | Hyeon-gu Lee, Minkyoung Kim, and Harksoo Kim (corresponding author), Implementation of a High-Performance Answer Snippet Retrieval System Based on Multiple Ranking Models for Biomedical Documents, Advanced Science Letters, Vol.23(10), pp.9486-9490, 2017.10. (SCOPUS) . | Geonwoo Park, Hyeon-gu Lee, and Harksoo Kim (corresponding author), Named Entity Recognition Model Based on Neural Networks Using Parts of Speech Probability and Gazetteer Features, Advanced Science Letters, Vol.23(10), pp.9530-9533, 2017.10. (SCOPUS) . | Hyeon-gu Lee, Geonwoo Park, and Harksoo Kim (corresponding author), Effective Integration of Morphological Analysis and Named Entity Recognition Based on a Recurrent Neural Network, Pattern Recognition Letters, Vol.112, pp.361-365, 2018.09.(SCIE) . | Hyeon-gu Lee and Harksoo Kim (corresponding author), GF-Net: Improving Machine Reading Comprehension with Feature Gates, Pattern Recognition Letters (available in online) (DOI: 10.1016/j.patrec.2019.10.030), 2019.11.(SCIE) . | . International Conference Papers . Hyeon-gu Lee, Minkyoung Kim, Harksoo Kim, Juae Kim, Sunjae Kwon, Jungyun Seo, Jungkyu Choi, Yi-reun Kim, KSAnswer: Question-answering System of Kangwon National University and Sogang University in the 2016 BioASQ Challenge, Proceedings of the fourth BioASQ workshop at the BioNLP workshop of ACL 2016, pp. 45-49, 2016.08. . | Geonwoo Park, Hyeon-gu Lee, and Harksoo Kim, Integrated Neural Network Model for Morphological Analysis and Named Entity Recognition in Korean, Proceedings of ICICPE 2017, pp. 83-84, 2017.02. . | Hyeon-gu Lee, Minkyoung Kim, and Harksoo Kim, A Reliable Model for Answer Snippet Retrieval in Biomedical Documents, Proceedings of ASCIT 2017 &amp; ADINTECH 2017, pp. 35-36, 2017.05. . | Geonwoo Park, Hyeon-gu Lee, and Harksoo Kim, High-Performance Named Entity Recognition Model Based on Bi-directional Gated Recurrent Unit Model with a Conditional Random Field Layer, Proceedings of ASCIT 2017 &amp; ADINTECH 2017, pp. 49-50, 2017.05. . | Cheoneum Park, Juae Kim, Hyeon-gu Lee, Reinald Kim Amplayo, Harksoo Kim, Jungyun Seo, and Changki Lee, ThisIsCompetition at SemEval-2019 Task 9: BERT is unstable for out-of-domain samples, Proceedings of the 13th International Workshop on Semantic Evaluation (SemEval-2019), pp. 1254-1261, 2019.06. . | . Domestic Journal Papers . Hyeon-gu Lee, Maengsik Choi, and Harksoo Kim (corresponding author), One-Class Classification Model Based on Lexical Information and Syntactic Patterns, Journal of the Korean Institute of Information Scientists and Engineers, Vol. 42(6), pp. 817-822, 2015.06. (in Korean) . | Hyeon-gu Lee, MinKyoung Kim, and Harksoo Kim (corresponding author), Answer Snippet Retrieval for Question Answering of Medical Documents, Journal of the Korean Institute of Information Scientists and Engineers, Vol. 43(8), pp. 927-932, 2016.08. (in Korean) . | Hyeon-gu Lee, and Harksoo Kim (corresponding author), Title Generation Model for which Sequence-to-Sequence RNNs with Attention and Copying Mechanisms are used, Journal of the Korean Institute of Information Scientists and Engineers, Vol. 44(7), pp. 674-679, 2017.07. (in Korean) . | Sihyung Kim, Hyeon-gu Lee, and Harksoo Kim (corresponding author), Knowledge Embedding Method for Implementing a Generative Question-Answering Chat System, Journal of the Korean Institute of Information Scientists and Engineers, Vol. 45(2), pp. 134-140, 2018.02. (in Korean) . | Hyeon-gu Lee and Harksoo Kim (corresponding author), Korean Machine Reading Comprehension using Reinforcement Learning and Dual Co-Attention Mechanism, Journal of the Korean Institute of Information Scientists and Engineers, Vol. 45(9), pp. 932-936, 2018.09. (in Korean) . | Jintae Kim, Hyeon-gu Lee, and Harksoo Kim (corresponding author), Effective Generative Chatbot Model Trainable with a Small Dialogue Corpus, Journal of the Korean Institute of Information Scientists and Engineers, Vol. 46(3), pp. 246-252, 2019.03. (in Korean) . | . Domestic Conference Papers . 이현구, 최맹식, 김학수, “Suffix Tree와 Distant Supervision을 이용한 관계 추출”, 제26회 한글 및 한국어 정보처리 학술대회, pp. 149-152, 2014.10. . | 이현구, 안혁주, 김학수, “의학용 영어 품사 태거 구현”, 제27회 한글 및 한국어 정보처리 학술대회, pp. 155-156, 2015.10. . | 김민경, 김시형, 이현구, 김학수, “효과적인 문장 검색을 위한 단어 클러스터링 기반 질의 확장”, 2016 한국인지과학회 연차학술대회, pp. 56, 2016.05. . | 이현구, 김학수, “딥러닝과 정보검색을 결합한 질의응답 시스템”, 제28회 한글 및 한국어 정보처리 학술대회, pp. 134-137, 2016.10. . | 이현구, 이세희, 김진태, 김학수, “Sequence to Sequence 모델과 키워드를 이용한 End-to-End 문서 제목 생성”, 한국정보과학회 2016년 동계학술발표회, pp. 452-454, 2016.12. . | 박건우, 이현구, 김학수 “Sequence-to-Sequence 기반 다중 발화 후보를 이용한 형태소 분석기”, 2017년 한국컴퓨터종합학술회의, pp. 648-650, 2017.06. . | 이현구, 김학수, 최정규, 김이른, “Dual Bi-Directional Attention Flow를 이용한 한국어 기계이해 시스템”, 제29회 한글 및 한국어 정보처리 학술대회, pp. 41-44, 2017.10. . | 이현구, 김민경, 김진태, 김학수, 이연수, 최맹식, “색인어 정규화 및 응답 필터링을 이용한 검색기반 채팅 모델”, 제29회 한글 및 한국어 정보처리 학술대회, pp. 197-200, 2017.10. . | 정석원, 이현구, 김학수, “TextRank 알고리즘과 주의 집중 순환 신경망을 이용한 하이브리드 문서 요약”, 제29회 한글 및 한국어 정보처리 학술대회, pp. 47-50, 2017.10. . | 이현구, 김학수, “GF-Net 자질 선별을 통한 고성능 기계독해”, 2018 한국컴퓨터종합학술회의, pp. 598-600, 2018.06. . | 이현구, 김진태, 최맹식, 김학수, “기계독해 기반 질의응답 챗봇”, 제30회 한글 및 한국어 정보처리 학술대회, pp. 35-39, 2018.10. . | 이현구, 김학수, “상용화를 위한 신뢰 점수 기반 기계독해 모델”, 제31회 한글 및 한국어 정보처리 학술대회, pp. 229-232, 2019.10. . | 이현구, 장영진, 김진태, 왕지현, 신동훈, 김학수, “추가 데이터 및 도메인 적응을 위한 기계독해 질의 생성”, 제31회 한글 및 한국어 정보처리 학술대회, pp. 441-444, 2019.10. . | . Award . 2nd place in Snippets section of BioASQ 2016, Task 4b: Biomedical Semantic QA | 한국정보과학회 2016년 동계학술발표회 우수논문상, 2016.12. | 제29회 한글 및 한국어 정보처리 학술대회 우수논문상, 2017.10. | 2018 한국컴퓨터종합학술대회 우수발표논문상, 2018.07. | 제30회 한글 및 한국어 정보처리 학술대회 우수논문상, 2018.10. | . ETC . ACL 2016, Student Travel Grants, 2016. | .",
          "url": "https://dgr1026.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "",
          "content": "안녕하세요 이현구의 개인페이지입니다. . 현재는 테스트 단계입니다. . Posts .",
          "url": "https://dgr1026.github.io/blog/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  

  
      ,"page8": {
          "title": "Search",
          "content": ". .",
          "url": "https://dgr1026.github.io/blog/search/",
          "relUrl": "/search/",
          "date": ""
      }
      
  

  
  

  

  
      ,"page11": {
          "title": "Tags",
          "content": "Contents . {% if site.categories.size &gt; 0 %} . {% for category in site.categories %} {% capture category_name %}{{ category | first }}{% endcapture %} {{ category_name }} | {% endfor %} . {% endif %} . {% for category in site.categories %} {% capture category_name %}{{ category | first }}{% endcapture %} . &lt;h3 id =&quot;{{ category_name }}&quot;&gt;&lt;i class=&quot;fas fa-tags category-tags-icon&quot;&gt;&lt;/i&gt;&lt;/i&gt; {{ category_name }}&lt;/h3&gt; &lt;a name=&quot;{{ category_name | slugize }}&quot;&gt;&lt;/a&gt; {% for post in site.categories[category_name] %} {%- assign date_format = site.minima.date_format | default: &quot;%b %-d, %Y&quot; -%} &lt;article class=&quot;archive-item&quot;&gt; &lt;p class=&quot;post-meta post-meta-title&quot;&gt;&lt;a class=&quot;page-meta&quot; href=&quot;{{ site.baseurl }}{{ post.url }}&quot;&gt;{{post.title}}&lt;/a&gt; • {{ post.date | date: date_format }}&lt;/p&gt; &lt;/article&gt; {% endfor %} {% endfor %} .",
          "url": "https://dgr1026.github.io/blog/categories/",
          "relUrl": "/categories/",
          "date": ""
      }
      
  

  
      ,"page12": {
          "title": "Development Guide",
          "content": "Basic usage: viewing your blog Converting the pages locally | Visual Studio Code integration | Advanced usage Rebuild all the containers | Removing all the containers | Attaching a shell in a services / container | . | . | . You can run your fastpages blog on your local machine, and view any changes you make to your posts, including Jupyter Notebooks and Word documents, live. The live preview requires that you have Docker installed on your machine. Follow the instructions on this page if you need to install Docker. . Basic usage: viewing your blog . All of the commands in this block assume that you’re in your blog root directory. To run the blog with live preview: . docker-compose up . When you run this command for the first time, it’ll build the required Docker images, and the process might take a couple minutes. . This command will build all the necessary containers and run the following services: . A service that monitors any changes in ./_notebooks/*.ipynb/ and ./_word/*.docx;*.doc and rebuild the blog on change. | A Jupyter Notebook that will run on https://127.0.0.1:8888 — use this to write and edit your posts. | A Jekyll server on https://127.0.0.1:4000 — use this to preview your blog. | The services will output to your terminal. If you close the terminal or hit Ctrl-C, the services will stop. If you want to run the services in the background: . # run all services in the background docker-compose up -d # stop the services docker-compose down . If you need to restart just the Jekyll server, and it’s running in the background — you can do docker-compose restart jekyll. . Note that the blog won’t autoreload on change, you’ll have to refresh your browser manually. . Converting the pages locally . If you just want to convert your notebooks and word documents to .md posts in _posts, this command will do it for you: . docker-compose up converter . You can launch just the jekyll server with docker-compose up jekyll. . Visual Studio Code integration . If you’re using VSCode with the Docker extension, you can run three containers from the sidebar: fastpages_jupyter_1,fastpages_watcher_1, and fastpages_jekyll_1. The containers will only show up in the list after you run or build them for the first time. So if they’re not in the list — try docker-compose build in the console. . Advanced usage . Rebuild all the containers . If you changed files in _action_files directory, you might need to rebuild the containers manually, without cache. . docker-compose build --force-rm --no-cache . Removing all the containers . Want to start from scratch and remove all the containers? . # make sure the containers are stopped: docker-compose stop # remove stopped containers docker-compose rm . Attaching a shell in a services / container . You can attach a terminal to a running service: . # If the container is already running: # attach to a bash shell in the jekyll service docker-compose exec jekyll /bin/bash # attach to a bash shell in the jupyter / watcher service. # they&#39;re essentially running the same software inside. docker-compose exec watcher /bin/bash . Note: you can use docker-compose run instead of docker-compose exec to start a service and then attach to it. Or you can run all your services in the background, docker-compose up -d, and then use docker-compose exec as in the example above. .",
          "url": "https://dgr1026.github.io/blog/DEVELOPMENT.html",
          "relUrl": "/DEVELOPMENT.html",
          "date": ""
      }
      
  

  
      ,"page13": {
          "title": "",
          "content": "Warning . Do not manually save images into this folder. This is used by GitHub Actions to automatically copy images. Any images you save into this folder could be deleted at build time. .",
          "url": "https://dgr1026.github.io/blog/images/copied_from_nb/",
          "relUrl": "/images/copied_from_nb/",
          "date": ""
      }
      
  

  
  

}